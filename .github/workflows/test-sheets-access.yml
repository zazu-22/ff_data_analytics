name: Test Commissioner Sheet Access

on:
  workflow_dispatch:

jobs:
  test-sheet-access:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install gspread google-auth pandas

      - name: Test sheet access
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          COMMISSIONER_SHEET_URL: ${{ secrets.COMMISSIONER_SHEET_URL }}
        run: |
          # Create credentials file
          echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" | base64 -d > /tmp/gcp-key.json

          # Python script to test access
          python << 'EOF'
          import json
          import os
          import gspread
          from google.oauth2.service_account import Credentials

          print("="*50)
          print("Testing Commissioner Sheet Access from GitHub Actions")
          print("="*50)

          # Get sheet URL
          sheet_url = os.environ.get("COMMISSIONER_SHEET_URL", "")
          print(f"Sheet URL: {sheet_url[:50]}...")

          # Extract sheet ID
          if "docs.google.com" in sheet_url:
              sheet_id = sheet_url.split("/d/")[1].split("/")[0]
          else:
              sheet_id = sheet_url

          print(f"Sheet ID: {sheet_id}")

          # Authenticate
          try:
              print("\n1. Authenticating...")
              scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
              creds = Credentials.from_service_account_file(
                  "/tmp/gcp-key.json",
                  scopes=scope
              )
              gc = gspread.authorize(creds)
              print("   ✓ Authenticated")

              print("\n2. Opening sheet...")
              sheet = gc.open_by_key(sheet_id)
              print(f"   ✓ Opened: {sheet.title}")

              print("\n3. Getting worksheets...")
              worksheets = sheet.worksheets()
              print(f"   ✓ Found {len(worksheets)} worksheets:")
              for i, ws in enumerate(worksheets[:10]):
                  print(f"      {i+1}. {ws.title}")

              print("\n4. Testing data read...")
              ws = worksheets[1] if len(worksheets) > 1 else worksheets[0]
              print(f"   Reading from: {ws.title}")

              # Try to read a small range
              values = ws.get("A1:C3")
              if values:
                  print(f"   ✓ Read {len(values)} rows")
                  print(f"   First row: {values[0]}")
              else:
                  print("   ✓ Can read (no data in range)")

              print("\n" + "="*50)
              print("✅ SUCCESS! Sheet access works in GitHub Actions!")
              print("="*50)
              print("\nThis confirms:")
              print("1. Your service account credentials are correct")
              print("2. The copied sheet is properly shared")
              print("3. The issue is with your local environment")
              print("\nRun your data pipeline in GitHub Actions or Google Cloud")

          except Exception as e:
              print(f"\n❌ Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          EOF

      - name: Save test results
        if: always()
        run: |
          echo "Test completed at $(date)" > test-results.txt

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt