- Sleeper API
	- for pulling up-to-date information from the host site for our league platform

- Google Sheets
	- the sheet for our single source of truth for our league's transactions, rosters, contract values, cut contracts, draft assets, salary cap situation, trade conditions

- Sports Data IO Discovery Lab (sdio)
	- detailed raw and fantasy actual and projected data from 2022 through current season
	- Via API
	- JSON output
	- API KEY: a5ef41fbbab643b9941f4654bf2982be
	- available tables shown in aPI Documentation: https://discoverylab.sportsdata.io/developers/api-documentation/nfl#
	- data dictionary available:
	 - Data Dictionary: `./data/data_dictionaries/sdio_fantasydata-nflv3-data-dictionary.csv`


- FF Analytics
	- https://github.com/FantasyFootballAnalytics/FantasyFootballAnalyticsR
	- https://ffanalytics.fantasyfootballanalytics.net/index.html
	- "Fantasy Football Analytics is a website for harnessing the power of statistics, data analysis, and R to improve your performance in fantasy football. This GitHub repository includes R scripts and data files for conducting the analyses in R as described on the website. Read more at http://fantasyfootballanalytics.net/."
	- used to:
		- create custom rankings and projoections: https://fantasyfootballanalytics.net/2014/06/custom-rankings-and-projections-for-your-league.html
		- calculate risk levels: https://fantasyfootballanalytics.net/2013/04/calculate-fantasy-players-risk-levels.html
		- scrape data from multiple sources: https://ffanalytics.fantasyfootballanalytics.net/index.html
	- Reference for all available functions: https://ffanalytics.fantasyfootballanalytics.net/reference/index.html
	- How to set scoring settings: https://ffanalytics.fantasyfootballanalytics.net/articles/scoring_settings.html
	- Data also available via manual download; unclear if webscraping is possible though would be ideal if so
		- https://apps.fantasyfootballanalytics.net/
		- Available downloads provide projected raw and fantasy statistics
		- Biggest differentiator from other sources is that it provides floors, ceilings, standard deviations, etc., which can be used to assess risk and minimize risk using a portfolio strategy, similar to financial economics and investment portfolio theory
		- files
			- projections fpts season
			- projections fpts by week
			- projevtions raw stats by season
			- projectsions raw stats by week
	- preference toward using the R packages to construct our data programmatically rather than manually downloading teh files; would also give us great flexibility to create more advanced analytics using their packages as the building blocks

- KeepTradeCut
	- Crowd sourced player market values: "KTC's dynasty fantasy football rankings crowdsource the current market value of players and picks from 23,391,441 data points (and counting) provided by users like you."
		- The KTC 'value' is specific to dynasty rankings in KTC only; it's not comparable to other values elsewhere
		- It should be used for assessing market valuation for a player to identify mispricings that we can exploit in trade, free agency contract bids, etc., trends
		- It can also be used as another input into any advanced models we develop when trying to derive a player valuation for making roster and contract decisions
	- Data via webscrape
		- Can model our script off of this: https://github.com/ees4/KeepTradeCut-Scraper/blob/main/ktc_to_csv.py
		- But will need tailroed to our league settings, column names, desired data, etc.
	- Dynasty Rankings: https://keeptradecut.com/dynasty-rankings
	- Dyansty Rookie Rankings: https://keeptradecut.com/dynasty-rankings/rookie-rankings
	- faq: https://keeptradecut.com/frequently-asked-questions?open=devy-overview

- nflverse
	- https://github.com/nflverse
	- from the readme: "The nflverse is a set of packages dedicated to data and analysis of the National Football League. Most data is stored in releases of the nflverse/nflverse-data repository, in various formats (csv, parquet, rds, qs being the primary ones). These can be accessed by any platform or programming language via the web URLs. We also maintain a set of packages to facilitate access to this data and apply modelling."
	- R packages:
		-   {nflverse} helps install and update all nflverse R packages.
		-   {nflreadr} provides easy access to nflverse data repositories.
		-   {nflfastR} cleans play by play data and applies EPA/WPA modelling. Most users will want precomputed data, via nflreadr.
		-   {nflplotR} facilitates plotting NFL data.
		-   {nfl4th} studies fourth down decisions with nflverse data and models.
		-   {nflseedR} simulates NFL season schedules with the user's model.

	- Python packages:
		- nflreadpy ports nflreadr to Python and provides easy, lightweight access to nflverse data repositories.
	- Detailed release notes and guidance for accessing nflreadr below:

# nflreadr

## nflverse Play-by-Play Data

There are three ways to obtain nflverse pbp data.

1. We recommend using `nflreadr::load_pbp()` or `nflfastR::load_pbp()` as the primary method of retrieving pbp data. This uses our automated data infrastructure to download clean data, and [we update this](https://github.com/nflverse/nflverse-pbp/blob/866020fdf54bee79ea11b6cf69168d438dd26dea/.github/workflows/update_data.yaml#L3-L13) on a nightly basis after each game day (and additionally at specific points on game days) during the season.
2. If this is not quick enough, `nflfastR::build_nflfastR_pbp()` parses raw pbp json files we save, **usually available within 15 minutes after a game has ended**.
3. If you have a SQL database, `nflfastR::update_db()` helps maintain a pbp database. It uses `nflfastR::build_nflfastR_pbp()` so can be run on the same schedule (i.e. within 15 minutes after a game has ended).

In all cases, it is recommended to update the data again during the night from Wednesday to Thursday in order to also receive the stat corrections that the NFL will incorporate from Monday to Wednesday at the latest. -> Thursday's `load_pbp()` is the cleanest data we have.

## nflverse Player and Team Stats

[Player stats](https://nflreadr.nflverse.com/reference/load_player_stats.html) and [Team stats](https://nflreadr.nflverse.com/reference/load_team_stats.html) are computed on the [same schedule as play-by-play data](https://github.com/nflverse/nflverse-pbp/blob/866020fdf54bee79ea11b6cf69168d438dd26dea/.github/workflows/update_data.yaml#L3-L13), i.e. on a nightly basis after each game day (and additionally at specific points on game days) during the season.

At the moment, it is not possible to speed up this process with a function in nflfastR. Even `nflfastR::calculate_stats` requires automated data. If this is too slow for you, please contact us on [nflverse discord](https://discord.com/invite/5Er2FBnnQa). If there is high demand, this may be adjusted.

## nflverse-FTN Charting Data

[ftn charting data](https://nflreadr.nflverse.com/reference/load_ftn_charting.html) updates every day at 0, 6, 12, 18 UTC during the season. The actual availability of new data depends on the update schedule of FTN.

## nflverse Participation Data

[Participation data](https://nflreadr.nflverse.com/reference/load_participation.html) prior to 2023 is from NFL NGS. The data source died during the 2023 season.

Participation data from 2023 onwards is courtesy of FTN and is provided **after all post-season games are completed**. It does not update during the season!

## nflverse Game/Schedule Data

[Game/Schedule data](https://nflreadr.nflverse.com/reference/load_schedules.html) updates very 5 minutes during the season.

## nflverse Roster Data

[Roster data](https://nflreadr.nflverse.com/reference/load_rosters.html) updates every day at 7AM UTC.

## Player Level Weekly NFL Next Gen Stats

Player level [weekly stats](https://nflreadr.nflverse.com/reference/load_nextgen_stats.html) provided by NFL Next Gen Stats update every night (in the range of 3 am - 5 am ET) during the season. The actual availability of new data depends on the update schedule of NGS.

## PFR Snap Count Data

[Snap Count data](https://nflreadr.nflverse.com/reference/load_snap_counts.html) updates every day at 0, 6, 12, 18 UTC during the season. The actual availability of new data depends on the update schedule of PFR.

## PFR Advanced Stats

[PFR Advanced Stats](https://nflreadr.nflverse.com/reference/load_pfr_advstats.html) updates every day at 7AM UTC during the season. The actual availability of new data depends on the update schedule of PFR.

## Depth Chart Data

[Depth Charts](https://nflreadr.nflverse.com/articles/dictionary_depth_charts.html) update every day at 7AM UTC throughout the year.

Please note that the data source has changed after the 2024 season. From 2025 onwards, depth charts are not assigned a week. Instead, each update provides a new ISO8601-formatted timestamp that users can assign to any point in time during the season. Each update is appended to the existing data with a new timestamp.

## Injury Data

Our data source died after the 2024 season. **At the moment, there is no 2025 data** and there is no ETA yet as to when we will be able to make injury data available again.
